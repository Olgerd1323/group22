{
	"info": {
		"_postman_id": "76ec7db1-a5f8-4fd3-8d2f-20786cc8705d",
		"name": "Postman.HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "oleg_1323",
							"type": "text"
						},
						{
							"key": "password",
							"value": "4974736",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",  \r",
							"            \"properties\": {\r",
							"                \"u_age\": {\"type\" : \"number\"},\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\"type\": \"string\"},\r",
							"                        {\"type\": \"number\"},\r",
							"                        {\"type\": \"number\"}\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\"type\": 'number'}\r",
							"            }\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\"type\": \"number\"},\r",
							"        \"qa_salary_after_6_months\": {\"type\": \"number\"},\r",
							"        \"start_qa_salary\": {\"type\": \"number\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    let isValidScheme = tv4.validate(jsonData, schema, true, true);\r",
							"    pm.expect(isValidScheme).to.be.true;\r",
							"});\r",
							"  \r",
							"let salary = jsonData.person.u_name[1];\r",
							"let qa_salary_after_6_months = jsonData.qa_salary_after_6_months;\r",
							"let qa_salary_after_12_months = jsonData.qa_salary_after_12_months;\r",
							"let u_salary_1_5_year = jsonData.person.u_salary_1_5_year;\r",
							"\r",
							"console.log (salary, typeof(salary));\r",
							"\r",
							"pm.test('Check qa_salary_after_6_months', function(){\r",
							"    pm.expect(qa_salary_after_6_months).to.eql(salary*2)\r",
							"});\r",
							"\r",
							"pm.test('Check qa_salary_after_12_months', function(){\r",
							"    pm.expect(qa_salary_after_12_months).to.eql(salary*2.9)\r",
							"});\r",
							"\r",
							"pm.test('Check u_salary_1_5_year', function(){\r",
							"    pm.expect(u_salary_1_5_year).to.eql(salary*4)\r",
							"});\r",
							"\r",
							"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);\r",
							"pm.environment.set(\"my_name\", jsonData.person.u_name[0]);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": 26,\r\n\"salary\": 1000,\r\n\"name\": \"Oleg\",\r\n\"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\" : \"number\"},\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\"type\": \"array\",\r",
							"            \"items\": [\r",
							"                {\"type\": \"number\"},\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"string\"}\r",
							"            ]\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    let isValidScheme = tv4.validate(jsonData, schema, true, true);\r",
							"    pm.expect(isValidScheme).to.be.true;\r",
							"});\r",
							"  \r",
							"let salary = jsonData.salary[0];\r",
							"let salary_2 = parseInt(jsonData.salary[1]);\r",
							"let salary_3 = parseInt(jsonData.salary[2]);\r",
							"\r",
							"\r",
							"pm.test('Check qa_salary_2', function(){\r",
							"    pm.expect(salary_2).to.eql(salary*2)\r",
							"});\r",
							"\r",
							"pm.test('Check qa_salary_3', function(){\r",
							"    pm.expect(salary_3).to.eql(salary*3)\r",
							"});\r",
							"\r",
							"pm.test('Check qa_salary_3 above then qa_salary_2', function(){\r",
							"    pm.expect(salary_3).to.be.above(salary_2)\r",
							"});\r",
							"\r",
							"pm.test('Check qa_salary_3 above then salary', function(){\r",
							"    pm.expect(salary_3).to.be.above(salary)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "oleg",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\" : \"number\"},\r",
							"        \"daily_food\": {\"type\" : \"number\"},\r",
							"        \"daily_sleep\": {\"type\" : \"number\"},\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    let isValidScheme = tv4.validate(jsonData, schema, true, true);\r",
							"    pm.expect(isValidScheme).to.be.true;\r",
							"});\r",
							"  \r",
							"let weight = parseInt(request.data.weight);\r",
							"let daily_food = jsonData.daily_food;\r",
							"let daily_sleep = jsonData.daily_sleep;\r",
							"\r",
							"console.log ('weight', weight, typeof(weight));\r",
							"console.log ('weight', daily_food, typeof(daily_food));\r",
							"\r",
							"pm.test('Check daily_food', function(){\r",
							"    pm.expect(daily_food).to.eql(weight*0.012)\r",
							"});\r",
							"\r",
							"pm.test('Check daily_sleep', function(){\r",
							"    pm.expect(daily_sleep).to.eql(weight*2.5)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "85",
							"type": "text"
						},
						{
							"key": "name",
							"value": "oleg",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\r",
							"                            \"type\": \"array\",\r",
							"                            \"items\": [\r",
							"                                {\r",
							"                                    \"type\": \"string\"\r",
							"                                },\r",
							"                                {\r",
							"                                    \"type\": \"number\"\r",
							"                                }\r",
							"                            ]\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"array\",\r",
							"                            \"items\": [\r",
							"                                {\r",
							"                                    \"type\": \"string\"\r",
							"                                },\r",
							"                                {\r",
							"                                    \"type\": \"number\"\r",
							"                                }\r",
							"                            ]\r",
							"                        }\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"number\"\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"number\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							" \r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    let isValidScheme = tv4.validate(jsonData, schema, true, true);\r",
							"    pm.expect(isValidScheme).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Check name', function(){\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"my_name\"))\r",
							"});\r",
							"\r",
							"pm.test('Check age', function(){\r",
							"    pm.expect(jsonData.age).to.eql(request.data.age)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Oleg",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let x = jsonData.length;\r",
							"//console.log('x =', x);\r",
							"function getrandomInt(x) {\r",
							"    return Math.floor(Math.random() * x)\r",
							"};\r",
							"//console.log('Math.random =', getrandomInt(x));\r",
							"console.log('massive.Cur_ID =', massive = jsonData[getrandomInt(x)]);\r",
							"console.log('curr_code =', massive.Cur_ID);\r",
							"pm.environment.set('Cur_ID', massive.Cur_ID);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    let isValidScheme = tv4.validate(jsonData, schema, true, true);\r",
							"    pm.expect(isValidScheme).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"let ids = [];\r",
							"for (let evg of jsonData){\r",
							"    pm.sendRequest({\r",
							"    url: 'http://162.55.220.72:5005/curr_byn',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Accept': 'application/json',\r",
							"        'Content-Type': 'application/x-www-form-formdata',\r",
							"      },\r",
							"    body: {\r",
							"        mode: 'formdata',\r",
							"        formdata: [{ key: \"auth_token\", value: pm.environment.get(\"token\"), disabled: false },\r",
							"                   { key: \"curr_code\", value: evg.Cur_ID, disabled: false },\r",
							"                   \r",
							"        ],\r",
							"    },\r",
							"}, \r",
							"     function (err, response) {\r",
							"    //console.log(response.json());\r",
							"    //console.log(err);\r",
							"     if (err || response.code == 500) {\r",
							"        return;}\r",
							"     if (response.code == 200) {\r",
							"        let res_data = response.json();\r",
							"            if (pm.expect(res_data).to.have.property(\"Cur_OfficialRate\")) {\r",
							"              ids.push(res_data);\r",
							"              console.log(ids);\r",
							"            }    \r",
							"    }    \r",
							"    }    \r",
							"    )    \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		}
	]
}